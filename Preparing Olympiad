#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<cmath>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;

//#define ordered_set tree <pair<int,int> ,null_type,less <pair<int,int> >, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
int main() {
	
	long long n;
	cin >> n;
	int c = 0;
	set<long long>s;
	s.insert(n);
	int c1 = 0, c2 = 0;
	long long m = n;
	while (n != 0) {
		int digit = n % 10;

		if (digit == 4)
			c1++;
		if (digit == 7)
			c2++;
		n = n / 10;
		c++;
	}
	string larg = "";
	for (int i = 0; i < c; i++) {
		if (i < c / 2)
			larg += '7';
		else
			larg += '4';
	}
	
	if ((c1 == c2) && (c1 + c2 == c)) { cout << m << "\n"; }
	//for (auto i : v) { cout << i << " "; }
	else if (c == 1)cout << "47\n";

	else if (larg < to_string(m)) {
		string res = "";
		if (c % 2)
			c = c + 1;
		else
			c = c + 2;
		for (int l = 0; l <c; l++) {
			if (l < c/2)
				res += '4';
			else
				res += '7';
		}
		cout << res << "\n";
	}
	
	else {
		if (c % 2 == 1)
			c++;
	
		
		//cout << larg << "\n" << c;
		

	long long test = (1 << c);
	

		for (int i = 0; i < test; i++) {
			int cOne = 0, cZero = 0;
			vector<int>v2;
			for (int j = 0; j < c; j++) {
				if ((i >> j) & 1) {
					cOne++;
					v2.push_back(7);
				}
				else {
					cZero++;
					v2.push_back(4);
				}

			}
			if ((cOne == cZero) && (cOne + cZero == c)) {
				long long sum = 0;
				int l = v2.size() - 1;
				for (int k = 0; k < v2.size(); k++) {
					sum += v2[k] * pow(10, l);
					l--;
				}
				//cout << sum << "\n";
				s.insert(sum);
			}
		}
		bool nn = true;
		for (auto io : s) {
			if (io == m) {
				nn = false;
			}
			else if (nn == false) {
				cout << io << "\n";
				break;
			}
			
		}
		
	}
	

}
