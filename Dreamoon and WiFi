#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<cmath>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;

//#define ordered_set tree <pair<int,int> ,null_type,less <pair<int,int> >, rb_tree_tag,tree_order_statistics_node_update>

using namespace std;
int main(){
	
	string s1;
	cin >> s1;
	string s2;
	cin >>s2;
	int que = 0;
	int n1 = 0;
	int n2 = 0;
	int p = 0,m=0;
	for (int i = 0; i < s1.length(); i++) {
		if (s1[i] == '+')
			p++;
		else
			m++;
	}
	for (int i = 0; i < s2.length(); i++) {
		if (s2[i] == '?')
			que++;
		else
		{
			if (s2[i] == '+')
				n1++;
			else
				n2++;
		}
	}
	//cout << n1 << " " << n2 << "\n";
	if (que == 0 && ((n1 == p) && (n2  == m))) { cout << "1.0\n"; }
	else if (que == 0 && (n1!=p||n2!=m))cout << "0.0\n";
	else {
		int test = (1LL << que);
		int count = 0;
		double r = pow(2,que);
		for (int i = 0; i < test; i++) {
			int n3 = 0, n4 = 0;
			for (int j = 0; j < que; j++) {
				if ((i >> j) & 1)
					n3++;
				else
					n4++;
			}
			if ((n1+n3==p)&&(n2+n4==m)) {

				count++;
			}

		}
		if (count == 0)
			cout << "0.0\n";
		else
		printf("%1.9f",(count * 1.0 / r ));
	}
	
}
